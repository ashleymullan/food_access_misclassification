x = as.character(as.formula(error_formula))[3]),
split = "+",
fixed = TRUE))
X_unval = setdiff(error_covar, analysis_covar)
Z = intersect(error_covar, analysis_covar)
offset = sub(pattern = "\\).*",
replacement = "",
x = sub(pattern = ".*\\(",
replacement = "",
x = setdiff(analysis_covar, c(X, Z))))
Y
X
analysis_covar
error_covar
X_unval
Z
offset
data_1 <- data_1 |>
mutate(logpop = log(O_POP)) |>
mutate(interaction_star = binXstar * METRO,
interaction_partial = binX_partial * METRO)
data_1 <- data_1 |>
mutate(logpop = log(O_POP)) |>
mutate(interaction_star = binXstar * METRO,
interaction_partial = binX_partial * METRO,
interaction_full = binX_full * METRO)
#gold standard
g <- summary(glm(formula = Y_DIABETES ~ binX_full + METRO + interaction_full,
family = poisson(link = "log"),
offset = log(O_POP),
data = data_1))$coefficients
#naive
n <- summary(glm(formula = Y_DIABETES ~ binXstar + METRO + interaction_star,
family = poisson(link = "log"),
offset = log(O_POP),
data = data_1))$coefficients
#mle.  (TO DO: add offset)
m <- mlePossum(analysis_formula = Y_DIABETES ~ binX_partial + METRO + interaction_partial + offset(logpop),
family = poisson,
error_formula = binX_partial ~ binXstar + METRO + interaction_star,
data = data_1,
noSE = FALSE,
alternative_SE = TRUE)
#mle.  (TO DO: add offset)
m <- mlePossum(analysis_formula = Y_DIABETES ~ binX_partial + METRO + offset(logpop),
family = poisson,
error_formula = binX_partial ~ binXstar + METRO + interaction_star,
data = data_1,
noSE = FALSE,
alternative_SE = TRUE)
#mle.  (TO DO: add offset)
m <- mlePossum(analysis_formula = Y_DIABETES ~ binX_partial + METRO + offset(logpop),
family = poisson,
error_formula = binX_partial ~ binXstar + METRO,
data = data_1,
noSE = FALSE,
alternative_SE = TRUE)
m
#mle.  (TO DO: add offset)
m <- mlePossum(analysis_formula = Y_DIABETES ~ binX_partial + offset(logpop),
family = poisson,
error_formula = binX_partial ~ binXstar,
data = data_1,
noSE = FALSE,
alternative_SE = TRUE)
m
#as of Jan 29, use this to generate data
food_access <- read.csv(file = "https://raw.githubusercontent.com/sarahlotspeich/food_access_imputation/refs/heads/main/piedmont-triad-data/analysis_data.csv")
## Define access indicators (at 1 mile buffer)
buffer = 1
food_access = food_access |>
mutate(binX_full = as.numeric(X_full >= buffer),
binXstar = as.numeric(Xstar >= buffer))
## Remove additional food access columns (not needed for primary analysis)
food_access = food_access |>
dplyr::select(GEOID, CountyName, ### keep neighborhood identifiers,
binX_full, binXstar, ### food access indicators,
POP_DENS, METRO, ### additional covariates,
O_POP, Y_DIABETES) ### and outcome (with offset).
## Order by Location ID
food_access = food_access |>
arrange(GEOID)
## Define query indicators (= 1 if map-based measures are available, = 0 otherwise)
set.seed(918) ### make the sampling reproducible
n = 180
queried_subset = food_access |>
filter(binXstar == 1) |>
pull(GEOID) |>
sample(size = n, replace = FALSE)
### Create column for queried X from complete-case
food_access = food_access |>
mutate(binX_partial = ifelse(test = GEOID %in% queried_subset, #$LocationID,
yes = binX_full,
no = NA))
local_dir <- "/Users/ashleymullan/Documents/Food-Access/"#"local-dir-here/" #replace w/ local location of this repo
setwd(paste0(local_dir, "food_access_misclassification"))
food_access |>
mutate(CountyName = factor(x = CountyName,
levels = c("Alamance", "Caswell", "Davidson", "Davie",
"Forsyth", "Guilford", "Montgomery", "Randolph",
"Rockingham", "Stokes", "Surry", "Yadkin" ),
labels = LETTERS[1:12])) |>
write.csv("Analysis/piedmont_data.csv",
row.names = FALSE)
food_access |> head()
local_dir <- "/Users/ashleymullan/Documents/Food-Access/"
data_path <- "food_access_misclassification/Analysis/"
data_1 <- read.csv(paste0(local_dir,
data_path,
"piedmont_data.csv"))
data_1 <- data_1 |>
mutate(logpop = log(O_POP)) |>
mutate(interaction_star = binXstar * METRO,
interaction_partial = binX_partial * METRO,
interaction_full = binX_full * METRO)
#gold standard
g <- summary(glm(formula = Y_DIABETES ~ binX_full + METRO + interaction_full,
family = poisson(link = "log"),
offset = log(O_POP),
data = data_1))$coefficients
#naive
n <- summary(glm(formula = Y_DIABETES ~ binXstar + METRO + interaction_star,
family = poisson(link = "log"),
offset = log(O_POP),
data = data_1))$coefficients
#mle.  (TO DO: add offset)
m <- mlePossum(analysis_formula = Y_DIABETES ~ binX_partial + offset(logpop),
family = poisson,
error_formula = binX_partial ~ binXstar,
data = data_1,
noSE = FALSE,
alternative_SE = TRUE)
m
#as of Jan 29, use this to generate data
food_access <- read.csv(file = "https://raw.githubusercontent.com/sarahlotspeich/food_access_imputation/refs/heads/main/piedmont-triad-data/analysis_data.csv")
## Define access indicators (at 1 mile buffer)
buffer = 1
food_access = food_access |>
mutate(binX_full = as.numeric(X_full <= buffer),
binXstar = as.numeric(Xstar <= buffer))
## Remove additional food access columns (not needed for primary analysis)
food_access = food_access |>
dplyr::select(GEOID, CountyName, ### keep neighborhood identifiers,
binX_full, binXstar, ### food access indicators,
POP_DENS, METRO, ### additional covariates,
O_POP, Y_DIABETES) ### and outcome (with offset).
## Order by Location ID
food_access = food_access |>
arrange(GEOID)
## Define query indicators (= 1 if map-based measures are available, = 0 otherwise)
set.seed(918) ### make the sampling reproducible
n = 180
queried_subset = food_access |>
filter(binXstar == 1) |>
pull(GEOID) |>
sample(size = n, replace = FALSE)
### Create column for queried X from complete-case
food_access = food_access |>
mutate(binX_partial = ifelse(test = GEOID %in% queried_subset, #$LocationID,
yes = binX_full,
no = NA))
local_dir <- "/Users/ashleymullan/Documents/Food-Access/"#"local-dir-here/" #replace w/ local location of this repo
setwd(paste0(local_dir, "food_access_misclassification"))
food_access |>
mutate(CountyName = factor(x = CountyName,
levels = c("Alamance", "Caswell", "Davidson", "Davie",
"Forsyth", "Guilford", "Montgomery", "Randolph",
"Rockingham", "Stokes", "Surry", "Yadkin" ),
labels = LETTERS[1:12])) |>
write.csv("Analysis/piedmont_data.csv",
row.names = FALSE)
food_access |> head()
health = read.csv(file = "https://raw.githubusercontent.com/sarahlotspeich/food_access_imputation/main/piedmont-triad-data/disease_prevalences_2022.csv")
## Dataset (2) Proximity to health foods based on straight-line and map-based distances (census tracts)
food_access = read.csv(file = "https://raw.githubusercontent.com/sarahlotspeich/food_access_imputation/main/piedmont-triad-data/review_proximity_healthy_foods.csv") |>
right_join(health,
by = join_by(LocationID == TractFIPS))
# Load data
## Dataset (1) Health outcomes from 2022 PLACES data
health = read.csv(file = "https://raw.githubusercontent.com/sarahlotspeich/food_access_imputation/main/piedmont-triad-data/disease_prevalences_2022.csv")
## Dataset (2) Proximity to health foods based on straight-line and map-based distances (census tracts)
food_access = read.csv(file = "https://raw.githubusercontent.com/sarahlotspeich/food_access_imputation/main/piedmont-triad-data/review_proximity_healthy_foods.csv") |>
right_join(health,
by = join_by(LocationID == TractFIPS))
## Define access indicators (at 1 mile buffer)
buffer = 1
food_access = food_access |>
mutate(binX_full = as.numeric(X_full <= buffer),
binXstar = as.numeric(Xstar <= buffer))
food_access |> head()
food_access = food_access |>
mutate(binX_full = as.numeric(dist_closest_map <= buffer),
binXstar = as.numeric(dist_closest_straight <= buffer))
## Dataset (3) Rural urban
ruca = read.csv("https://raw.githubusercontent.com/sarahlotspeich/food_access_imputation/main/piedmont-triad-data/ruca2010revised.csv")
ruca_labels = c("Metropolitan", "Metropolitan", "Metropolitan",
"Micropolitan", "Micropolitan", "Micropolitan",
"Small town", "Small town", "Small town", "Rural")
food_access = food_access |>
dplyr::left_join(ruca, by = dplyr::join_by(LocationID == StateCountyTract)) |>
dplyr::mutate(PrimaryRUCA = factor(PrimaryRUCA,
labels = ruca_labels))
food_access |> head()
## Remove additional food access columns (not needed for primary analysis)
food_access = food_access |>
dplyr::select(LocationID, CountyName, ### keep neighborhood identifiers,
binX_full, binXstar, ### food access indicators,
PopulationDensity, LandArea, ### additional covariates,
POP, DIABETES) ### and outcome (with offset).
## Order by Location ID
food_access = food_access |>
arrange(LocationID)
## Define query indicators (= 1 if map-based measures are available, = 0 otherwise)
set.seed(918) ### make the sampling reproducible
n = 180
queried_subset = food_access |>
filter(binXstar == 1) |>
pull(LocationID) |>
sample(size = n, replace = FALSE)
### Create column for queried X from complete-case
food_access = food_access |>
mutate(binX_partial = ifelse(test = LocationID %in% queried_subset, #$LocationID,
yes = binX_full,
no = NA))
local_dir <- "/Users/ashleymullan/Documents/Food-Access/"#"local-dir-here/" #replace w/ local location of this repo
setwd(paste0(local_dir, "food_access_misclassification"))
food_access |>
mutate(CountyName = factor(x = CountyName,
levels = c("Alamance", "Caswell", "Davidson", "Davie",
"Forsyth", "Guilford", "Montgomery", "Randolph",
"Rockingham", "Stokes", "Surry", "Yadkin" ),
labels = LETTERS[1:12])) |>
write.csv("Analysis/piedmont_data.csv",
row.names = FALSE)
local_dir <- "/Users/ashleymullan/Documents/Food-Access/"
data_path <- "food_access_misclassification/Analysis/"
data_1 <- read.csv(paste0(local_dir,
data_path,
"piedmont_data.csv"))
data_1 |> head()
data_1 <- data_1 |>
mutate(logpop = log(POP)) #|>
data_1 <- data_1 |>
mutate(logpop = log(POP),
logLA = log(LandArea)) #|>
#gold standard
g_f <- summary(glm(formula = Y_DIABETES ~ binX_full + logLA + offset(logpop),
family = poisson(link = "log"),
data = data_1))$coefficients
#gold standard
g_f <- summary(glm(formula = DIABETES ~ binX_full + logLA + offset(logpop),
family = poisson(link = "log"),
data = data_1))$coefficients
g_a <- summary(glm(formula = DIABETES ~ binX_full + logLA,
family = poisson(link = "log"),
offset = logpop,
data = data_1))$coefficients
g_f
g_a
#naive
n <- summary(glm(formula = Y_DIABETES ~ binXstar + logLA,
family = poisson(link = "log"),
offset = log(O_POP),
data = data_1))$coefficients
#naive
n <- summary(glm(formula = DIABETES ~ binXstar + logLA,
family = poisson(link = "log"),
offset = log(O_POP),
data = data_1))$coefficients
#naive
n <- summary(glm(formula = DIABETES ~ binXstar + logLA,
family = poisson(link = "log"),
offset = log(POP),
data = data_1))$coefficients
#cc
c <- summary(glm(formula = DIABETES ~ binX_partial + LogLA,
family = poisson(link = "log"),
offset = log(POP),
data = data_1 |> filter(!is.na(binX_partial))))$coefficients
#cc
c <- summary(glm(formula = DIABETES ~ binX_partial + logLA,
family = poisson(link = "log"),
offset = log(POP),
data = data_1)))$coefficients
#cc
c <- summary(glm(formula = DIABETES ~ binX_partial + logLA,
family = poisson(link = "log"),
offset = log(POP),
data = data_1))$coefficients
c
#mle.  (TO DO: add offset)
m <- mlePossum(analysis_formula = Y_DIABETES ~ binX_partial + logLA + offset(log(POP)),
family = poisson,
error_formula = binX_partial ~ binXstar + logLA,
data = data_1,
noSE = FALSE,
alternative_SE = TRUE)
#mle.  (TO DO: add offset)
m <- mlePossum(analysis_formula = Y_DIABETES ~ binX_partial + logLA + offset(logpop),
family = poisson,
error_formula = binX_partial ~ binXstar + logLA,
data = data_1,
noSE = FALSE,
alternative_SE = TRUE)
#mle.  (TO DO: add offset)
m <- mlePossum(analysis_formula = DIABETES ~ binX_partial + logLA + offset(logpop),
family = poisson,
error_formula = binX_partial ~ binXstar + logLA,
data = data_1,
noSE = FALSE,
alternative_SE = TRUE)
m
#mle.  (TO DO: add offset)
m <- mlePossum(analysis_formula = DIABETES ~ binX_partial + offset(logpop),
family = poisson,
error_formula = binX_partial ~ binXstar,
data = data_1,
noSE = FALSE,
alternative_SE = TRUE)
m
#mle.  (TO DO: add offset)
m2 <- mlePossum(analysis_formula = DIABETES ~ binX_partial + offset(logpop),
family = poisson,
error_formula = binX_partial ~ binXstar,
data = data_1,
noSE = FALSE,
alternative_SE = FALSE)
m2
m
m
################################################################################
# SETUP ########################################################################
################################################################################
## Load libraries
library(dplyr) ## to wrangle data
# Load data
## Dataset (1) Health outcomes from 2022 PLACES data
health = read.csv(file = "https://raw.githubusercontent.com/sarahlotspeich/food_access_imputation/main/piedmont-triad-data/disease_prevalences_2022.csv")
## Dataset (2) Proximity to health foods based on straight-line and map-based distances (census tracts)
food_access = read.csv(file = "https://raw.githubusercontent.com/sarahlotspeich/food_access_imputation/main/piedmont-triad-data/review_proximity_healthy_foods.csv") |>
right_join(health,
by = join_by(LocationID == TractFIPS))
## Define access indicators (at 5 mile buffer)
buffer = 5
food_access = food_access |>
mutate(binX_full = as.numeric(dist_closest_map <= buffer),
binXstar = as.numeric(dist_closest_straight <= buffer))
## Dataset (3) Rural urban
ruca = read.csv("https://raw.githubusercontent.com/sarahlotspeich/food_access_imputation/main/piedmont-triad-data/ruca2010revised.csv")
ruca_labels = c("Metropolitan", "Metropolitan", "Metropolitan",
"Micropolitan", "Micropolitan", "Micropolitan",
"Small town", "Small town", "Small town", "Rural")
food_access = food_access |>
dplyr::left_join(ruca, by = dplyr::join_by(LocationID == StateCountyTract)) |>
dplyr::mutate(PrimaryRUCA = factor(PrimaryRUCA,
labels = ruca_labels))
## Remove additional food access columns (not needed for primary analysis)
food_access = food_access |>
dplyr::select(LocationID, CountyName, ### keep neighborhood identifiers,
binX_full, binXstar, ### food access indicators,
PopulationDensity, LandArea, ### additional covariates,
POP, DIABETES) ### and outcome (with offset).
## Order by Location ID
food_access = food_access |>
arrange(LocationID)
## Define query indicators (= 1 if map-based measures are available, = 0 otherwise)
set.seed(918) ### make the sampling reproducible
n = 180
queried_subset = food_access |>
filter(binXstar == 1) |>
pull(LocationID) |>
sample(size = n, replace = FALSE)
### Create column for queried X from complete-case
food_access = food_access |>
mutate(binX_partial = ifelse(test = LocationID %in% queried_subset, #$LocationID,
yes = binX_full,
no = NA))
local_dir <- "/Users/ashleymullan/Documents/Food-Access/"#"local-dir-here/" #replace w/ local location of this repo
setwd(paste0(local_dir, "food_access_misclassification"))
food_access |>
mutate(CountyName = factor(x = CountyName,
levels = c("Alamance", "Caswell", "Davidson", "Davie",
"Forsyth", "Guilford", "Montgomery", "Randolph",
"Rockingham", "Stokes", "Surry", "Yadkin" ),
labels = LETTERS[1:12])) |>
write.csv("Analysis/piedmont_data5.csv",
row.names = FALSE)
local_dir <- "/Users/ashleymullan/Documents/Food-Access/"
data_path <- "food_access_misclassification/Analysis/"
data_1 <- read.csv(paste0(local_dir,
data_path,
"piedmont_data5.csv"))
data_1 <- data_1 |>
mutate(logpop = log(POP),
logLA = log(LandArea)) #|>
#gold standard
g <- summary(glm(formula = DIABETES ~ binX_full + logLA,
family = poisson(link = "log"),
offset = logpop,
data = data_1))$coefficients
#naive
n <- summary(glm(formula = DIABETES ~ binXstar + logLA,
family = poisson(link = "log"),
offset = logpop,
data = data_1))$coefficients
#mle.
m <- mlePossum(analysis_formula = DIABETES ~ binX_partial + offset(logpop),
family = poisson,
error_formula = binX_partial ~ binXstar,
data = data_1,
noSE = FALSE,
alternative_SE = TRUE)
#mle.
m <- mlePossum(analysis_formula = DIABETES ~ binX_partial + logLA + offset(logpop),
family = poisson,
error_formula = binX_partial ~ binXstar + logLA,
data = data_1,
noSE = FALSE,
alternative_SE = TRUE)
m
data_1 <- data_1 |>
mutate(logpop = log(POP),
logLA = log(LandArea),
logscaledpop = log(POP / 1000)) #to change interpretation to rate per 10K people
#gold standard
g <- summary(glm(formula = DIABETES ~ binX_full + logLA,
family = poisson(link = "log"),
offset = logscaledpop,
data = data_1))$coefficients
#naive
n <- summary(glm(formula = DIABETES ~ binXstar + logLA,
family = poisson(link = "log"),
offset = logscaledpop,
data = data_1))$coefficients
#mle.
m <- mlePossum(analysis_formula = DIABETES ~ binX_partial + logLA + offset(logscaledpop),
family = poisson,
error_formula = binX_partial ~ binXstar + logLA,
data = data_1,
noSE = FALSE,
alternative_SE = TRUE)
#cc
c <- summary(glm(formula = DIABETES ~ binX_partial + logLA,
family = poisson(link = "log"),
offset = logscaledpop,
data = data_1))$coefficients
names(m$coefficients) <- c("Estimate", "Std. Error")
m$coefficients
method <- c(rep("g", times = 3),
rep("n", times = 3),
rep("m", times = 3),
rep("c", times = 3))
results <- rbind(g[,1:2],n[,1:2],m$coefficients,c[,1:2]) |> cbind(method)
m
g
cc
c
n
data_1 <- read.csv(paste0(local_dir,
data_path,
"piedmont_data.csv"))
data_1 <- data_1 |>
mutate(logpop = log(POP),
logLA = log(LandArea),
logscaledpop = log(POP / 1000)) #to change interpretation to rate per 10K people
#gold standard
g <- summary(glm(formula = DIABETES ~ binX_full + logLA,
family = poisson(link = "log"),
offset = logscaledpop,
data = data_1))$coefficients
#naive
n <- summary(glm(formula = DIABETES ~ binXstar + logLA,
family = poisson(link = "log"),
offset = logscaledpop,
data = data_1))$coefficients
#mle.
m <- mlePossum(analysis_formula = DIABETES ~ binX_partial + logLA + offset(logscaledpop),
family = poisson,
error_formula = binX_partial ~ binXstar + logLA,
data = data_1,
noSE = FALSE,
alternative_SE = TRUE)
m
data_1 <- data_1 |>
mutate(logpop = log(POP),
logLA = log(LandArea - median(LandArea)),
logscaledpop = log(POP / 1000)) #to change interpretation to rate per 10K people
data_1 <- read.csv(paste0(local_dir,
data_path,
"piedmont_data.csv"))
data_1 <- data_1 |>
mutate(logpop = log(POP),
logLA = log(LandArea) - median(log(LandArea)),
logscaledpop = log(POP / 1000)) #to change interpretation to rate per 10K people
#gold standard
g <- summary(glm(formula = DIABETES ~ binX_full + logLA,
family = poisson(link = "log"),
offset = logscaledpop,
data = data_1))$coefficients
#naive
n <- summary(glm(formula = DIABETES ~ binXstar + logLA,
family = poisson(link = "log"),
offset = logscaledpop,
data = data_1))$coefficients
#mle.
m <- mlePossum(analysis_formula = DIABETES ~ binX_partial + logLA + offset(logscaledpop),
family = poisson,
error_formula = binX_partial ~ binXstar + logLA,
data = data_1,
noSE = FALSE,
alternative_SE = TRUE)
m
